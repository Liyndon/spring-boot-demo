<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wiserv.dao.LoggingEventDao">
    <!-- LoggingEvent的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_LoggingEvent_Map" type="com.wiserv.bean.po.LoggingEvent">
        <id column="event_id" property="eventId" />
        <result column="timestmp" property="timestmp" />
        <result column="formatted_message" property="formattedMessage" />
        <result column="logger_name" property="loggerName" />
        <result column="level_string" property="levelString" />
        <result column="thread_name" property="threadName" />
        <result column="reference_flag" property="referenceFlag" />
        <result column="arg0" property="arg0" />
        <result column="arg1" property="arg1" />
        <result column="arg2" property="arg2" />
        <result column="arg3" property="arg3" />
        <result column="caller_filename" property="callerFilename" />
        <result column="caller_class" property="callerClass" />
        <result column="caller_method" property="callerMethod" />
        <result column="caller_line" property="callerLine" />
    </resultMap>

	   <!-- Assist用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="Assist">
        <where>
            <foreach collection="require" item="req" separator=" ">
                ${req.require} #{req.value} <if test="req.suffix != null"> ${req.suffix}</if>
            </foreach>
        </where>
    </sql>

	   <!-- updateAssist用于更新数据的使用它拓展自Assist,用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="updateAssist">
        <where>
            <foreach collection="assist.require" item="req" separator=" ">
                ${req.require} #{req.value} <if test="req.suffix != null"> ${req.suffix}</if>
            </foreach>
        </where>
    </sql>

    <!-- 数据库中表名为:logging_event的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="logging_event_Column">
        logging_event.event_id as event_id
        ,logging_event.timestmp as timestmp
        ,logging_event.formatted_message as formatted_message
        ,logging_event.logger_name as logger_name
        ,logging_event.level_string as level_string
        ,logging_event.thread_name as thread_name
        ,logging_event.reference_flag as reference_flag
        ,logging_event.arg0 as arg0
        ,logging_event.arg1 as arg1
        ,logging_event.arg2 as arg2
        ,logging_event.arg3 as arg3
        ,logging_event.caller_filename as caller_filename
        ,logging_event.caller_class as caller_class
        ,logging_event.caller_method as caller_method
        ,logging_event.caller_line as caller_line
    </sql>

    <!--获得类名为:LoggingEvent对应的数据库表的数据总行数 -->
    <select id="getLoggingEventRowCount" parameterType="com.wiserv.common.Assist" resultType="java.lang.Long">
        select count(event_id) from logging_event
        <if test="require!=null"><include refid="Assist" /></if>
    </select>
    <!-- 获得类名为:LoggingEvent对应数据库中表的数据集合 -->
    <select id="selectLoggingEvent" parameterType="com.wiserv.common.Assist"  resultMap="result_LoggingEvent_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <choose>
            <when test="resultColumn!=null">${resultColumn}</when>
            <otherwise>
        <include refid="logging_event_Column" /> 
            </otherwise>
        </choose>
        from logging_event
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT event_id as primary_key FROM logging_event
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow},#{rowSize} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=logging_event.event_id
            </otherwise>
        </choose>
    </select> 

    <!-- 获得一个LoggingEvent对象,以参数LoggingEvent对象中不为空的属性作为条件进行查询-->
    <select id="selectLoggingEventByObj" parameterType="com.wiserv.bean.po.LoggingEvent" resultMap="result_LoggingEvent_Map">
        select 
            <include refid="logging_event_Column" /> 
        from logging_event
        <where>
            <if test="callerLine != null "> and logging_event.caller_line = #{callerLine}</if>
            <if test="callerMethod != null "> and logging_event.caller_method = #{callerMethod}</if>
            <if test="callerClass != null "> and logging_event.caller_class = #{callerClass}</if>
            <if test="callerFilename != null "> and logging_event.caller_filename = #{callerFilename}</if>
            <if test="arg3 != null "> and logging_event.arg3 = #{arg3}</if>
            <if test="arg2 != null "> and logging_event.arg2 = #{arg2}</if>
            <if test="arg1 != null "> and logging_event.arg1 = #{arg1}</if>
            <if test="arg0 != null "> and logging_event.arg0 = #{arg0}</if>
            <if test="referenceFlag != null "> and logging_event.reference_flag = #{referenceFlag}</if>
            <if test="threadName != null "> and logging_event.thread_name = #{threadName}</if>
            <if test="levelString != null "> and logging_event.level_string = #{levelString}</if>
            <if test="loggerName != null "> and logging_event.logger_name = #{loggerName}</if>
            <if test="formattedMessage != null "> and logging_event.formatted_message = #{formattedMessage}</if>
            <if test="timestmp != null "> and logging_event.timestmp = #{timestmp}</if>
            <if test="eventId != null "> and logging_event.event_id = #{eventId}</if>
        </where>
    </select> 

    <!-- 通过LoggingEvent的id获得对应数据库中表的数据对象-->
    <select id="selectLoggingEventById" parameterType="java.lang.Long" resultMap="result_LoggingEvent_Map">
        select 
            <include refid="logging_event_Column" /> 
        from logging_event
        where logging_event.event_id = #{id}
    </select> 

    <!-- 将LoggingEvent插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertLoggingEvent" parameterType="com.wiserv.bean.po.LoggingEvent">
        insert into logging_event(event_id,timestmp,formatted_message,logger_name,level_string,thread_name,reference_flag,arg0,arg1,arg2,arg3,caller_filename,caller_class,caller_method,caller_line) 
        values(#{eventId},#{timestmp},#{formattedMessage},#{loggerName},#{levelString},#{threadName},#{referenceFlag},#{arg0},#{arg1},#{arg2},#{arg3},#{callerFilename},#{callerClass},#{callerMethod},#{callerLine})
    </insert>

    <!-- 将LoggingEvent中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyLoggingEvent" parameterType="com.wiserv.bean.po.LoggingEvent">
        insert into logging_event
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="eventId != null">event_id,</if>
            <if test="timestmp != null">timestmp,</if>
            <if test="formattedMessage != null">formatted_message,</if>
            <if test="loggerName != null">logger_name,</if>
            <if test="levelString != null">level_string,</if>
            <if test="threadName != null">thread_name,</if>
            <if test="referenceFlag != null">reference_flag,</if>
            <if test="arg0 != null">arg0,</if>
            <if test="arg1 != null">arg1,</if>
            <if test="arg2 != null">arg2,</if>
            <if test="arg3 != null">arg3,</if>
            <if test="callerFilename != null">caller_filename,</if>
            <if test="callerClass != null">caller_class,</if>
            <if test="callerMethod != null">caller_method,</if>
            <if test="callerLine != null">caller_line,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="eventId != null"> #{eventId},</if>
            <if test="timestmp != null"> #{timestmp},</if>
            <if test="formattedMessage != null"> #{formattedMessage},</if>
            <if test="loggerName != null"> #{loggerName},</if>
            <if test="levelString != null"> #{levelString},</if>
            <if test="threadName != null"> #{threadName},</if>
            <if test="referenceFlag != null"> #{referenceFlag},</if>
            <if test="arg0 != null"> #{arg0},</if>
            <if test="arg1 != null"> #{arg1},</if>
            <if test="arg2 != null"> #{arg2},</if>
            <if test="arg3 != null"> #{arg3},</if>
            <if test="callerFilename != null"> #{callerFilename},</if>
            <if test="callerClass != null"> #{callerClass},</if>
            <if test="callerMethod != null"> #{callerMethod},</if>
            <if test="callerLine != null"> #{callerLine},</if>
        </trim>
    </insert>

    <!-- 通过LoggingEvent的id将数据库表中对应的数据删除-->
    <delete id="deleteLoggingEventById" parameterType="java.lang.Long">
        delete from logging_event
        where event_id = #{id}
    </delete>

    <!-- 通过辅助工具Assist中的条件将LoggingEvent对应的数据库表的数据删除-->
    <delete id="deleteLoggingEvent" parameterType="com.wiserv.common.Assist">
        delete from logging_event
        <if test="require!=null"><include refid="Assist" /></if>
    </delete>

    <!-- 通过LoggingEvent的id将LoggingEvent的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateLoggingEventById" parameterType="com.wiserv.bean.po.LoggingEvent">
        update logging_event set
            timestmp=#{timestmp}
            ,formatted_message=#{formattedMessage}
            ,logger_name=#{loggerName}
            ,level_string=#{levelString}
            ,thread_name=#{threadName}
            ,reference_flag=#{referenceFlag}
            ,arg0=#{arg0}
            ,arg1=#{arg1}
            ,arg2=#{arg2}
            ,arg3=#{arg3}
            ,caller_filename=#{callerFilename}
            ,caller_class=#{callerClass}
            ,caller_method=#{callerMethod}
            ,caller_line=#{callerLine}
        where event_id=#{eventId}
    </update>

    <!-- 通过LoggingEvent的id将LoggingEvent中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyLoggingEventById" parameterType="com.wiserv.bean.po.LoggingEvent">
        update logging_event
        <set>
            <if test="timestmp != null">
                timestmp=#{timestmp},
            </if>
            <if test="formattedMessage != null">
                formatted_message=#{formattedMessage},
            </if>
            <if test="loggerName != null">
                logger_name=#{loggerName},
            </if>
            <if test="levelString != null">
                level_string=#{levelString},
            </if>
            <if test="threadName != null">
                thread_name=#{threadName},
            </if>
            <if test="referenceFlag != null">
                reference_flag=#{referenceFlag},
            </if>
            <if test="arg0 != null">
                arg0=#{arg0},
            </if>
            <if test="arg1 != null">
                arg1=#{arg1},
            </if>
            <if test="arg2 != null">
                arg2=#{arg2},
            </if>
            <if test="arg3 != null">
                arg3=#{arg3},
            </if>
            <if test="callerFilename != null">
                caller_filename=#{callerFilename},
            </if>
            <if test="callerClass != null">
                caller_class=#{callerClass},
            </if>
            <if test="callerMethod != null">
                caller_method=#{callerMethod},
            </if>
            <if test="callerLine != null">
                caller_line=#{callerLine},
            </if>
        </set>
        where event_id=#{eventId}
    </update>

    <!-- 通过辅助工具Assist中的条件将LoggingEvent中的数据更新到数据库对应的表中,包括值为null的数据-->
    <update id="updateLoggingEvent" parameterType="map">
        update logging_event
        <set>
                event_id=#{enti.eventId},
                timestmp=#{enti.timestmp},
                formatted_message=#{enti.formattedMessage},
                logger_name=#{enti.loggerName},
                level_string=#{enti.levelString},
                thread_name=#{enti.threadName},
                reference_flag=#{enti.referenceFlag},
                arg0=#{enti.arg0},
                arg1=#{enti.arg1},
                arg2=#{enti.arg2},
                arg3=#{enti.arg3},
                caller_filename=#{enti.callerFilename},
                caller_class=#{enti.callerClass},
                caller_method=#{enti.callerMethod},
                caller_line=#{enti.callerLine},
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

    <!-- 通过辅助工具Assist中的条件将LoggingEvent中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyLoggingEvent" parameterType="map">
        update logging_event
        <set>
            <if test="enti.eventId != null">
                event_id=#{enti.eventId},
            </if>
            <if test="enti.timestmp != null">
                timestmp=#{enti.timestmp},
            </if>
            <if test="enti.formattedMessage != null">
                formatted_message=#{enti.formattedMessage},
            </if>
            <if test="enti.loggerName != null">
                logger_name=#{enti.loggerName},
            </if>
            <if test="enti.levelString != null">
                level_string=#{enti.levelString},
            </if>
            <if test="enti.threadName != null">
                thread_name=#{enti.threadName},
            </if>
            <if test="enti.referenceFlag != null">
                reference_flag=#{enti.referenceFlag},
            </if>
            <if test="enti.arg0 != null">
                arg0=#{enti.arg0},
            </if>
            <if test="enti.arg1 != null">
                arg1=#{enti.arg1},
            </if>
            <if test="enti.arg2 != null">
                arg2=#{enti.arg2},
            </if>
            <if test="enti.arg3 != null">
                arg3=#{enti.arg3},
            </if>
            <if test="enti.callerFilename != null">
                caller_filename=#{enti.callerFilename},
            </if>
            <if test="enti.callerClass != null">
                caller_class=#{enti.callerClass},
            </if>
            <if test="enti.callerMethod != null">
                caller_method=#{enti.callerMethod},
            </if>
            <if test="enti.callerLine != null">
                caller_line=#{enti.callerLine},
            </if>
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

</mapper>
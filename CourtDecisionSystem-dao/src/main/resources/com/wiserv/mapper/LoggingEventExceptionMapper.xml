<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wiserv.dao.LoggingEventExceptionDao">
    <!-- LoggingEventException的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_LoggingEventException_Map" type="com.wiserv.bean.po.LoggingEventException">
        <id column="event_id" property="eventId" />
        <result column="i" property="i" />
        <result column="trace_line" property="traceLine" />
    </resultMap>

	   <!-- Assist用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="Assist">
        <where>
            <foreach collection="require" item="req" separator=" ">
                ${req.require} #{req.value} <if test="req.suffix != null"> ${req.suffix}</if>
            </foreach>
        </where>
    </sql>

	   <!-- updateAssist用于更新数据的使用它拓展自Assist,用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="updateAssist">
        <where>
            <foreach collection="assist.require" item="req" separator=" ">
                ${req.require} #{req.value} <if test="req.suffix != null"> ${req.suffix}</if>
            </foreach>
        </where>
    </sql>

    <!-- 数据库中表名为:logging_event_exception的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="logging_event_exception_Column">
        logging_event_exception.event_id as event_id
        ,logging_event_exception.i as i
        ,logging_event_exception.trace_line as trace_line
    </sql>

    <!--获得类名为:LoggingEventException对应的数据库表的数据总行数 -->
    <select id="getLoggingEventExceptionRowCount" parameterType="com.wiserv.common.Assist" resultType="java.lang.Long">
        select count(event_id) from logging_event_exception
        <if test="require!=null"><include refid="Assist" /></if>
    </select>
    <!-- 获得类名为:LoggingEventException对应数据库中表的数据集合 -->
    <select id="selectLoggingEventException" parameterType="com.wiserv.common.Assist"  resultMap="result_LoggingEventException_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <choose>
            <when test="resultColumn!=null">${resultColumn}</when>
            <otherwise>
        <include refid="logging_event_exception_Column" /> 
            </otherwise>
        </choose>
        from logging_event_exception
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT event_id as primary_key FROM logging_event_exception
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow},#{rowSize} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=logging_event_exception.event_id
            </otherwise>
        </choose>
    </select> 

    <!-- 获得一个LoggingEventException对象,以参数LoggingEventException对象中不为空的属性作为条件进行查询-->
    <select id="selectLoggingEventExceptionByObj" parameterType="com.wiserv.bean.po.LoggingEventException" resultMap="result_LoggingEventException_Map">
        select 
            <include refid="logging_event_exception_Column" /> 
        from logging_event_exception
        <where>
            <if test="traceLine != null "> and logging_event_exception.trace_line = #{traceLine}</if>
            <if test="i != null "> and logging_event_exception.i = #{i}</if>
            <if test="eventId != null "> and logging_event_exception.event_id = #{eventId}</if>
        </where>
    </select> 

    <!-- 通过LoggingEventException的id获得对应数据库中表的数据对象-->
    <select id="selectLoggingEventExceptionById" parameterType="java.lang.Long" resultMap="result_LoggingEventException_Map">
        select 
            <include refid="logging_event_exception_Column" /> 
        from logging_event_exception
        where logging_event_exception.event_id = #{id}
    </select> 

    <!-- 将LoggingEventException插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertLoggingEventException" parameterType="com.wiserv.bean.po.LoggingEventException">
        insert into logging_event_exception(event_id,i,trace_line) 
        values(#{eventId},#{i},#{traceLine})
    </insert>

    <!-- 将LoggingEventException中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyLoggingEventException" parameterType="com.wiserv.bean.po.LoggingEventException">
        insert into logging_event_exception
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="eventId != null">event_id,</if>
            <if test="i != null">i,</if>
            <if test="traceLine != null">trace_line,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="eventId != null"> #{eventId},</if>
            <if test="i != null"> #{i},</if>
            <if test="traceLine != null"> #{traceLine},</if>
        </trim>
    </insert>

    <!-- 通过LoggingEventException的id将数据库表中对应的数据删除-->
    <delete id="deleteLoggingEventExceptionById" parameterType="java.lang.Long">
        delete from logging_event_exception
        where event_id = #{id}
    </delete>

    <!-- 通过辅助工具Assist中的条件将LoggingEventException对应的数据库表的数据删除-->
    <delete id="deleteLoggingEventException" parameterType="com.wiserv.common.Assist">
        delete from logging_event_exception
        <if test="require!=null"><include refid="Assist" /></if>
    </delete>

    <!-- 通过LoggingEventException的id将LoggingEventException的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateLoggingEventExceptionById" parameterType="com.wiserv.bean.po.LoggingEventException">
        update logging_event_exception set
            i=#{i}
            ,trace_line=#{traceLine}
        where event_id=#{eventId}
    </update>

    <!-- 通过LoggingEventException的id将LoggingEventException中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyLoggingEventExceptionById" parameterType="com.wiserv.bean.po.LoggingEventException">
        update logging_event_exception
        <set>
            <if test="i != null">
                i=#{i},
            </if>
            <if test="traceLine != null">
                trace_line=#{traceLine},
            </if>
        </set>
        where event_id=#{eventId}
    </update>

    <!-- 通过辅助工具Assist中的条件将LoggingEventException中的数据更新到数据库对应的表中,包括值为null的数据-->
    <update id="updateLoggingEventException" parameterType="map">
        update logging_event_exception
        <set>
                event_id=#{enti.eventId},
                i=#{enti.i},
                trace_line=#{enti.traceLine},
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

    <!-- 通过辅助工具Assist中的条件将LoggingEventException中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyLoggingEventException" parameterType="map">
        update logging_event_exception
        <set>
            <if test="enti.eventId != null">
                event_id=#{enti.eventId},
            </if>
            <if test="enti.i != null">
                i=#{enti.i},
            </if>
            <if test="enti.traceLine != null">
                trace_line=#{enti.traceLine},
            </if>
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

</mapper>
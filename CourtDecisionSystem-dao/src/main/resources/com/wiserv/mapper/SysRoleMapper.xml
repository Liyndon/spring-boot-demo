<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wiserv.dao.SysRoleDao">
    <!-- SysRole的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_SysRole_Map" type="com.wiserv.bean.po.SysRole">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="code" property="code"/>
        <result column="state" property="state"/>
    </resultMap>

    <!-- Assist用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="Assist">
        <where>
            <foreach collection="require" item="req" separator=" ">
                ${req.require} #{req.value}
                <if test="req.suffix != null">${req.suffix}</if>
            </foreach>
        </where>
    </sql>

    <!-- updateAssist用于更新数据的使用它拓展自Assist,用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="updateAssist">
        <where>
            <foreach collection="assist.require" item="req" separator=" ">
                ${req.require} #{req.value}
                <if test="req.suffix != null">${req.suffix}</if>
            </foreach>
        </where>
    </sql>

    <!-- 数据库中表名为:sys_role的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="sys_role_Column">
        sys_role.id as id
        ,sys_role.name as name
        ,sys_role.code as code
        ,sys_role.state as state
    </sql>

    <!--获得类名为:SysRole对应的数据库表的数据总行数 -->
    <select id="getSysRoleRowCount" parameterType="com.wiserv.common.Assist" resultType="java.lang.Long">
        select count(id) from sys_role
        <if test="require!=null">
            <include refid="Assist"/>
        </if>
    </select>
    <!-- 获得类名为:SysRole对应数据库中表的数据集合 -->
    <select id="selectSysRole" parameterType="com.wiserv.common.Assist" resultMap="result_SysRole_Map">
        select
        <if test="distinct !=null">${distinct}</if>
        <choose>
            <when test="resultColumn!=null">${resultColumn}</when>
            <otherwise>
                <include refid="sys_role_Column"/>
            </otherwise>
        </choose>
        from sys_role
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist"/>
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT id as primary_key FROM sys_role
                <if test="require!=null">
                    <include refid="Assist"/>
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow},#{rowSize}</when>
                    <when test="rowSize !=null">LIMIT #{rowSize}</when>
                </choose>
                ) as tmp
                on tmp.primary_key=sys_role.id
            </otherwise>
        </choose>
    </select>

    <!-- 获得一个SysRole对象,以参数SysRole对象中不为空的属性作为条件进行查询-->
    <select id="selectSysRoleByObj" parameterType="com.wiserv.bean.po.SysRole" resultMap="result_SysRole_Map">
        select
        <include refid="sys_role_Column"/>
        from sys_role
        <where>
            <if test="state != null ">and sys_role.state = #{state}</if>
            <if test="code != null ">and sys_role.code = #{code}</if>
            <if test="name != null ">and sys_role.name = #{name}</if>
            <if test="id != null ">and sys_role.id = #{id}</if>
        </where>
    </select>

    <!-- 通过SysRole的id获得对应数据库中表的数据对象-->
    <select id="selectSysRoleById" parameterType="java.lang.Integer" resultMap="result_SysRole_Map">
        select
        <include refid="sys_role_Column"/>
        from sys_role
        where sys_role.id = #{id}
    </select>

    <!-- 通过SysUser的id获得对应数据库中表的数据对象-->
    <select id="selectSysRoleById" parameterType="java.lang.Integer" resultMap="result_SysRole_Map">
        select
        <include refid="sys_role_Column"/>
        from sys_role LEFT  JOIN  sys_user_role on sys_role.id = sys_user_role.role_id
        where sys_user_role.user_id = #{userId}
    </select>

    <!-- 将SysRole插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertSysRole" parameterType="com.wiserv.bean.po.SysRole">
        insert into sys_role(id,name,code,state) 
        values(#{id},#{name},#{code},#{state})
    </insert>

    <!-- 将SysRole中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptySysRole" parameterType="com.wiserv.bean.po.SysRole">
        insert into sys_role
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">id,</if>
            <if test="name != null">name,</if>
            <if test="code != null">code,</if>
            <if test="state != null">state,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">#{id},</if>
            <if test="name != null">#{name},</if>
            <if test="code != null">#{code},</if>
            <if test="state != null">#{state},</if>
        </trim>
    </insert>

    <!-- 通过SysRole的id将数据库表中对应的数据删除-->
    <delete id="deleteSysRoleById" parameterType="java.lang.Integer">
        delete from sys_role
        where id = #{id}
    </delete>

    <!-- 通过辅助工具Assist中的条件将SysRole对应的数据库表的数据删除-->
    <delete id="deleteSysRole" parameterType="com.wiserv.common.Assist">
        delete from sys_role
        <if test="require!=null">
            <include refid="Assist"/>
        </if>
    </delete>

    <!-- 通过SysRole的id将SysRole的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateSysRoleById" parameterType="com.wiserv.bean.po.SysRole">
        update sys_role set
            name=#{name}
            ,code=#{code}
            ,state=#{state}
        where id=#{id}
    </update>

    <!-- 通过SysRole的id将SysRole中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptySysRoleById" parameterType="com.wiserv.bean.po.SysRole">
        update sys_role
        <set>
            <if test="name != null">
                name=#{name},
            </if>
            <if test="code != null">
                code=#{code},
            </if>
            <if test="state != null">
                state=#{state},
            </if>
        </set>
        where id=#{id}
    </update>

    <!-- 通过辅助工具Assist中的条件将SysRole中的数据更新到数据库对应的表中,包括值为null的数据-->
    <update id="updateSysRole" parameterType="map">
        update sys_role
        <set>
            id=#{enti.id},
            name=#{enti.name},
            code=#{enti.code},
            state=#{enti.state},
        </set>
        <if test="assist.require!=null">
            <include refid="updateAssist"/>
        </if>
    </update>

    <!-- 通过辅助工具Assist中的条件将SysRole中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptySysRole" parameterType="map">
        update sys_role
        <set>
            <if test="enti.id != null">
                id=#{enti.id},
            </if>
            <if test="enti.name != null">
                name=#{enti.name},
            </if>
            <if test="enti.code != null">
                code=#{enti.code},
            </if>
            <if test="enti.state != null">
                state=#{enti.state},
            </if>
        </set>
        <if test="assist.require!=null">
            <include refid="updateAssist"/>
        </if>
    </update>

</mapper>